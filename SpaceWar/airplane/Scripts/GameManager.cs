using UnityEngine; using System.Collections; using UnityEngine.SceneManagement; public class GameManager : MonoBehaviour {     public static GameManager Instance;     public int m_score = 0;     public static int m_hiscore = 0;     protected Player m_player;      public AudioClip m_musicClip;     protected AudioSource m_Audio;     void Awake()     {         Instance = this;     }     // Use this for initialization     void Start () {         m_Audio = this.GetComponent<AudioSource>();         // find player         GameObject obj = GameObject.FindGameObjectWithTag("Player");         if (obj != null)         {             m_player = obj.GetComponent<Player>();         }     }     // Update is called once per frame     void Update () {         // paly background music in loop          if (!m_Audio.isPlaying)         {             m_Audio.clip = m_musicClip;             m_Audio.Play();         }         // pause the game         if (Time.timeScale > 0 && Input.GetKeyDown(KeyCode.Escape))         {             Time.timeScale = 0;         }     }     void OnGUI()     {         // pause the game         if (Time.timeScale == 0)         {             // continue the game             if (GUI.Button(new Rect(Screen.width * 0.5f - 50, Screen.height * 0.4f, 100, 30), "Continue the game"))             {                 Time.timeScale = 1;             }             // exit the game             if (GUI.Button(new Rect(Screen.width * 0.5f - 50, Screen.height * 0.6f, 100, 30), "game exit"))             {                 // exit the game                 Application.Quit();             }         }         int life = 0;         if (m_player != null)         {             // get the life value of player             life = (int)m_player.m_life;         }         else // game over         {             // enlarger the font             GUI.skin.label.fontSize = 50;             // display the game failure             GUI.skin.label.alignment = TextAnchor.LowerCenter;             GUI.Label(new Rect(0, Screen.height * 0.2f, Screen.width, 60), "Game Failue");             GUI.skin.label.fontSize = 20;             // display button to try again             if (GUI.Button(new Rect(Screen.width * 0.5f - 50, Screen.height * 0.5f, 100, 30), "Try again"))             {                 // read the current level                 SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);                // Application.LoadLevel(Application.loadedLevelName);             }        }         GUI.skin.label.fontSize = 15;         // display the player life value         GUI.Label(new Rect(5, 5, 100, 30), "Player " + life);         // display the recorded highest score         GUI.skin.label.alignment = TextAnchor.LowerCenter;         GUI.Label(new Rect(0, 5, Screen.width, 30), "Records: " + m_hiscore);         // display the current score         GUI.Label(new Rect(0, 25, Screen.width, 30), "Score: " + m_score);     }     //      public void AddScore( int point )     {         m_score += point;         // update the highest recorded score         if (m_hiscore < m_score)             m_hiscore = m_score;     } }

